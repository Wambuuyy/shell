#ifndef SHELL_H
#define SHELL_H

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <limits.h>
#include <fcntl.h>
#include <errno.h>

#define INTERACTIVE_FLAG 1
#define NON_INTERACTIVE_FLAG 0
#define HISTORY_BUFFER_LENGTH 256
#define HIST_MAX 100
#define CMD_NORM 0
#define BUF_FLUSH '\n'
#define MAX_ARGV_SIZE 1024
#define MAX_PATH_SIZE 1024
#define MAX_ENV_SIZE 1024

/**
 * struct list - Represents a node in a linked list.
 * @str: The string content of the node.
 * @len: The length of the string.
 * @next: Pointer to the next node in the list.
 *
 * Description: This structure defines a node in a linked list
 * Each node contains a string (@str), its length (@len),
 * and a pointer to the next node
 * in the list (@next).
 */

typedef struct list
{
	char *str;
	int len;
	struct list *next;
} list_t;

/**
 * struct Input - Represents the input and state of the shell.
 * @buffer: The main buffer storing the input command.
 * @length: The length of the input buffer.
 * @command_buffer: An array of strings representing
 * a processed command.
 * @linecount_flag: A flag indicating whether line counting is active.
 * @histcount: The history count for tracking command history.
 * @i: The index used for buffer processing.
 * @argv: An array of strings representing command arguments.
 * @ENVIRONMENT: An array of strings representing
 * the environment variables.
 * @path: The path associated with the command.
 * @argc: The number of arguments in the command.
 * @readfd: File descriptor for reading.
 * @history: Linked list for storing command history.
 * @env: Linked list for storing environment variables.
 * @alias: Linked list for storing command aliases.
 * @environ_changed: A flag indicating whether
 * the environment has changed.
 * @status: The status of the last executed command.
 *
 * Description: This structure defines the input
 * and state of the shell,
 * including the main input buffer,
 * processed command buffer, various flags,
 * and linked lists for history,
 * environment variables, and aliases.
 */
typedef struct Input
{
	char *buffer;
	size_t length;
	char **command_buffer;
	int linecount_flag;
	int histcount;
	size_t i;

	char *argv[MAX_ARGV_SIZE];
	char *ENVIRONMENT[MAX_ENV_SIZE];
	char *path;
	int argc;
	int readfd;
	list_t *history;
	list_t *env;
	list_t *alias;
	int environ_changed;
	int status;
} Input;


extern char **environ;

int unset_alias(Input *input, char *str);
int set_alias(Input *input, char *str);
int print_alias(list_t *node);
void print_prompt(int *info);
int check_interactive(int readfd);
void process_input(Input *input, char **av, ssize_t result, int *bresults);
void hist_buf(char *buffer, size_t size, int *last, int *lncnt, list_t *hist);
int is_chain(Input *input, char *buf, size_t *p);
void check_chain(Input *input, char *buf, size_t *p, size_t i, size_t len);
char **get_environ(Input *input);
int _unsetenv(Input *input, char *var);
int _setenv(Input *input, char *var, char *value);
void handle_error(const char *message);
int _getline(Input *input, char **ptr, size_t *length);
char *realloc_str(char *old, size_t old_len, size_t new_len);
ssize_t add_buf(char *dst, const char *src, size_t d_size, size_t s_len);
int find_newline(const char *buf, size_t start, size_t len);
int exit_handler(Input *input);
int cd_handler(Input *input);
int help_handler(Input *input);
int build_hist_list(char *buffer, int linecount, history);
int renumber_history(list_t **history);
char *get_history_file(Input *input);
int store_history(Input *input);
void initialize_input(Input *input);
void free_input(Input *input);
ssize_t input_buf(Input *input, char **buf, size_t *len);
ssize_t get_input(Input *input);
ssize_t read_buf(Input *input, char *buf, size_t *i);
void appendnode_end(list_t **head, char *str, int len);
int delete_index_node(list_t **head, unsigned int index);
int main(int ac, char **av);
int setfiledes(int filedes, int ac, char **av, int *readfd);
int populate_env(Input *input);
void read_hist(char *history_file, Input *input);
int shell(Input *input, char **av);
void sigintHandler(__attribute__((unused))int sig_num);
int history_handler(Input *input);
int alias_handler(Input *input);
void execute_command(Input *input);
void remove_comments(char *buf);
int is_cmd(Input *input, char *path);
char *dup_chars(char *pathstr, int start, int stop);
char *find_path(Input *input, char *pathstr, char *cmd);
int identify_command(Input *input);
int identify_builtin(Input *input);
char **strtok_str(char *input_string, char *delimiters);
char **strtok_single(char *input_string, char delimiter);
int is_delimiter(char character, char *delimiters);
void free_string_array(char **array);







#endif /* SHELL_H */
